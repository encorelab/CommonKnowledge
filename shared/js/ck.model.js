// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  CK.Model = (function() {

    function Model() {}

    Model.configure = function(url, db) {
      if (url == null) {
        throw "Cannot configure model because no DrowsyDromedary URL was given!";
      }
      if (db == null) {
        throw "Cannot configure model because no database name was given!";
      }
      this.baseURL = url;
      this.dbURL = "" + url + "/" + db;
      CK.Model.Contribution.prototype.urlRoot = "" + this.dbURL + "/contributions";
      CK.Model.Contributions.prototype.url = "" + this.dbURL + "/contributions";
      return CK.Model.DrowsyModel.createNecessaryCollections(['contributions']);
    };

    return Model;

  })();

  CK.Model.DrowsyModel = (function(_super) {

    __extends(DrowsyModel, _super);

    function DrowsyModel() {
      return DrowsyModel.__super__.constructor.apply(this, arguments);
    }

    DrowsyModel.prototype.idAttribute = "_id";

    DrowsyModel.prototype.parse = function(data) {
      data._id = data._id.$oid;
      return data;
    };

    DrowsyModel.prototype.initialize = function() {
      if (!this.get(this.idAttribute)) {
        this.set(this.idAttribute, CK.Model.DrowsyModel.generateMongoObjectId());
      }
      if (!this.get('timestamp')) {
        return this.set('timestamp', Date());
      }
    };

    DrowsyModel.generateMongoObjectId = function() {
      var base, rand, randLength, time;
      base = 16;
      randLength = 13;
      time = Date.now().toString(base);
      rand = Math.ceil(Math.random() * (Math.pow(base, randLength) - 1)).toString(base);
      return time + (Array(randLength + 1).join("0") + rand).slice(-randLength);
    };

    DrowsyModel.createNecessaryDatabase = function(requiredDatabase, afterwards) {
      return jQuery.ajax(CK.Model.baseURL, {
        type: 'get',
        dataType: 'json',
        success: function(existingDatabases) {
          if (__indexOf.call(existingDatabases, requiredDatabase) >= 0) {
            return afterwards();
          } else {
            return jQuery.post(CK.Model.baseURL, {
              db: requiredDatabase
            }, afterwards);
          }
        },
        error: function(err) {
          console.error("Couldn't fetch list of databases because: ", JSON.parse(err.responseText));
          throw err.responseText;
        }
      });
    };

    DrowsyModel.createNecessaryCollections = function(requiredCollections) {
      var dbUrl,
        _this = this;
      return dbUrl = jQuery.ajax(CK.Model.dbURL, {
        type: 'get',
        dataType: 'json',
        success: function(existingCollections) {
          var col, _i, _len, _results;
          _results = [];
          for (_i = 0, _len = requiredCollections.length; _i < _len; _i++) {
            col = requiredCollections[_i];
            if (__indexOf.call(existingCollections, col) < 0) {
              console.log("Creating collection '" + col + "' under " + CK.Model.dbURL);
              _results.push(jQuery.post(config.drowsyURL, {
                collection: col
              }));
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        },
        error: function(err) {
          console.error("Couldn't fetch list of collections from " + CK.Model.dbURL + " because: ", JSON.parse(err.responseText));
          throw err.responseText;
        }
      });
    };

    return DrowsyModel;

  })(Backbone.Model);

  CK.Model.DrowsyCollection = (function(_super) {

    __extends(DrowsyCollection, _super);

    function DrowsyCollection() {
      return DrowsyCollection.__super__.constructor.apply(this, arguments);
    }

    DrowsyCollection.prototype.model = CK.Model.DrowsyModel;

    return DrowsyCollection;

  })(Backbone.Collection);

  CK.Model.Contribution = (function(_super) {

    __extends(Contribution, _super);

    function Contribution() {
      return Contribution.__super__.constructor.apply(this, arguments);
    }

    Contribution.prototype.urlRoot = void 0;

    return Contribution;

  })(CK.Model.DrowsyModel);

  CK.Model.Contributions = (function(_super) {

    __extends(Contributions, _super);

    function Contributions() {
      return Contributions.__super__.constructor.apply(this, arguments);
    }

    Contributions.prototype.model = CK.Model.Contribution;

    Contributions.prototype.url = void 0;

    return Contributions;

  })(CK.Model.DrowsyCollection);

}).call(this);
