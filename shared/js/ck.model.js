// Generated by CoffeeScript 1.4.0
(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  CK.Model = (function() {

    function Model() {}

    Model.init = function(url, db) {
      var deferredConfigure,
        _this = this;
      deferredConfigure = $.Deferred();
      if (url == null) {
        throw "Cannot configure model because no DrowsyDromedary URL was given!";
      }
      if (db == null) {
        throw "Cannot configure model because no database name was given!";
      }
      this.baseURL = url;
      this.dbURL = "" + url + "/" + db;
      this.server = new Drowsy.Server(url);
      this.db = this.server.database(db);
      this.createNecessaryCollections(['contributions', 'tags', 'states']).then(function() {
        var tags;
        _this.defineModelClasses();
        tags = new CK.Model.Tags();
        return tags.fetch({
          success: function(tags) {
            var tag;
            if (tags.find(function(t) {
              return t.get('name') === "N/A";
            })) {
              console.log("Not creating 'N/A' tag because it already exists");
            } else {
              console.log("Creating 'N/A' tag...");
              tag = new CK.Model.Tag();
              tag.set('name', "N/A");
              tag.save();
            }
            return deferredConfigure.resolve();
          }
        });
      });
      return deferredConfigure;
    };

    Model.createNecessaryCollections = function(requiredCollections) {
      var df, dfs;
      dfs = [];
      df = $.Deferred();
      this.db.collections(function(colls) {
        var col, existingCollections, _i, _len, _results;
        existingCollections = _.pluck(colls, 'name');
        _results = [];
        for (_i = 0, _len = requiredCollections.length; _i < _len; _i++) {
          col = requiredCollections[_i];
          if (__indexOf.call(existingCollections, col) < 0) {
            console.log("Creating collection '" + col + "' under " + CK.Model.dbURL);
            _results.push(dfs.push(db.createCollection(col)));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      });
      $.when.apply($, dfs).done(function() {
        return df.resolve();
      });
      return df;
    };

    Model.defineModelClasses = function() {
      this.Contribution = (function(_super) {

        __extends(Contribution, _super);

        function Contribution() {
          this.hasTag = __bind(this.hasTag, this);

          this.removeTag = __bind(this.removeTag, this);

          this.addTag = __bind(this.addTag, this);

          this.get = __bind(this.get, this);

          this.initialize = __bind(this.initialize, this);
          return Contribution.__super__.constructor.apply(this, arguments);
        }

        Contribution.prototype.initialize = function() {
          Contribution.__super__.initialize.call(this);
          if (!this.get('created_at')) {
            return this.set('created_at', new Date());
          }
        };

        Contribution.prototype.get = function(attr) {
          var date, val;
          val = Contribution.__super__.get.call(this, attr);
          if (attr === 'created_at') {
            if (!(val instanceof Date)) {
              date = new Date(val);
              if (!isNaN(date.getTime())) {
                val = date;
              }
            }
          }
          return val;
        };

        Contribution.prototype.addTag = function(tag, tagger) {
          var existingTagRelationships, tagRel,
            _this = this;
          if (!(tag instanceof CK.Model.Tag)) {
            console.error("Cannot addTag ", tag, " because it is not a CK.Model.Tag instance!");
            throw "Invalid tag (doesn't exist)";
          }
          if (!tag.id) {
            console.error("Cannot addTag ", tag, " to contribution ", this, " because it doesn't have an id!");
            throw "Invalid tag (no id)";
          }
          existingTagRelationships = this.get('tags') || [];
          if (_.any(existingTagRelationships, function(tr) {
            return tr.id === tag.id;
          })) {
            console.warn("Cannot addTag ", tag, " to contribution ", this, " because it already has this tag.");
            return this;
          }
          tagRel = {
            id: tag.id,
            name: tag.get('name'),
            tagger: tagger,
            tagged_at: new Date()
          };
          existingTagRelationships.push(tagRel);
          this.set('tags', existingTagRelationships);
          return this;
        };

        Contribution.prototype.removeTag = function(tag, tagger) {
          var reducedTags,
            _this = this;
          reducedTags = _.reject(this.get('tags'), function(t) {
            return (t.id === tag.id || t.name === tag.get('name')) && (!(tagger != null) || t.tagger === tagger);
          });
          return this.set('tags', reducedTags);
        };

        Contribution.prototype.hasTag = function(tag, tagger) {
          var _this = this;
          return _.any(this.get('tags'), function(t) {
            return t.id === tag.id && (!(tagger != null) || t.tagger === tagger);
          });
        };

        return Contribution;

      })(this.db.Document('contributions'));
      this.Contributions = (function(_super) {

        __extends(Contributions, _super);

        function Contributions() {
          return Contributions.__super__.constructor.apply(this, arguments);
        }

        Contributions.prototype.model = CK.Model.Contribution;

        return Contributions;

      })(this.db.Collection('contributions'));
      this.Tag = (function(_super) {

        __extends(Tag, _super);

        function Tag() {
          return Tag.__super__.constructor.apply(this, arguments);
        }

        return Tag;

      })(this.db.Document('tags'));
      this.Tags = (function(_super) {

        __extends(Tags, _super);

        function Tags() {
          return Tags.__super__.constructor.apply(this, arguments);
        }

        Tags.prototype.model = CK.Model.Tag;

        return Tags;

      })(this.db.Collection('tags'));
      this.State = (function(_super) {

        __extends(State, _super);

        function State() {
          return State.__super__.constructor.apply(this, arguments);
        }

        return State;

      })(this.db.Document('states'));
      return this.States = (function(_super) {

        __extends(States, _super);

        function States() {
          return States.__super__.constructor.apply(this, arguments);
        }

        States.prototype.model = CK.Model.State;

        return States;

      })(this.db.Collection('states'));
    };

    return Model;

  })();

}).call(this);
