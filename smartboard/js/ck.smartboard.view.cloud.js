// Generated by CoffeeScript 1.4.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  CK.Smartboard.View.Cloud = (function() {

    function Cloud(wallView) {
      this.update = __bind(this.update, this);

      this.detectCollision = __bind(this.detectCollision, this);

      this.addLinks = __bind(this.addLinks, this);

      this.addTag = __bind(this.addTag, this);

      this.addContribution = __bind(this.addContribution, this);

      this.tick = __bind(this.tick, this);

      this.connectorTransform = __bind(this.connectorTransform, this);

      this.linkDistance = __bind(this.linkDistance, this);

      this.generateForceFunction = __bind(this.generateForceFunction, this);

      var $n, cloud, i, n, _i, _len, _ref,
        _this = this;
      console.log("Cloudifying the wall...");
      this.wall = wallView;
      this.wallWidth = this.wall.$el.innerWidth();
      this.wallHeight = this.wall.$el.innerHeight();
      this.nodes = this.wall.$el.find('.balloon').toArray();
      this.links = [];
      _ref = this.nodes;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        n = _ref[i];
        $n = jQuery(n);
        n.index = i;
      }
      this.force = this.generateForceFunction();
      this.tags = {};
      Sail.app.tags.each(function(tag) {
        var t;
        t = jQuery('#' + tag.id)[0];
        return _this.tags[tag.id] = t;
      });
      cloud = this;
      jQuery('.balloon.contribution').each(function() {
        var c, contribBalloon, tag, tid, _j, _len1, _ref1, _results;
        contribBalloon = jQuery(this);
        if (!contribBalloon.data('tags')) {
          return;
        }
        c = contribBalloon[0];
        _ref1 = contribBalloon.data('tags').split(' ');
        _results = [];
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          tid = _ref1[_j];
          if (cloud.tags[tid]) {
            tag = cloud.tags[tid];
            (tag.contribs != null) || (tag.contribs = []);
            tag.contribs.push(c.id);
            _results.push(cloud.links.push({
              source: tag,
              target: c
            }));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      });
      this.vis = d3.select("#" + this.wall.id);
      this.update();
    }

    Cloud.prototype.generateForceFunction = function() {
      return d3.layout.force().charge(0).linkDistance(this.linkDistance).linkStrength(0.2).gravity(0).friction(0.2).size([this.wallWidth, this.wallHeight]).nodes(this.nodes).links(this.links).on('tick', this.tick);
    };

    Cloud.prototype.linkDistance = function(link, i) {
      return (jQuery(link.source).outerWidth() / 2 + jQuery(link.target).outerWidth() / 2) + 10;
    };

    Cloud.prototype.connectorTransform = function(d) {
      return "rotate(" + (Math.atan2(d.target.y - d.source.y, d.target.x - d.source.x) * 180 / Math.PI) + "deg)";
    };

    Cloud.prototype.tick = function() {
      var i, q, _i, _ref,
        _this = this;
      this.balloon.style('left', function(d) {
        var balloonWidth;
        balloonWidth = jQuery(d).outerWidth();
        if (d.x + balloonWidth / 2 > _this.wallWidth) {
          d.x = _this.wallWidth - balloonWidth / 2;
        } else if (d.x - balloonWidth / 2 < 0) {
          d.x = 0 + balloonWidth / 2;
        }
        return (d.x - balloonWidth / 2) + 'px';
      }).style('top', function(d) {
        var balloonHeight;
        balloonHeight = jQuery(d).outerHeight();
        if (d.y + balloonHeight / 2 > _this.wallHeight) {
          d.y = _this.wallHeight - balloonHeight / 2;
        } else if (d.y - balloonHeight / 2 < 0) {
          d.y = 0 + balloonHeight / 2;
        }
        return (d.y - balloonHeight / 2) + 'px';
      }).each(function(d) {
        if (jQuery(d).hasClass('pinned')) {
          return d.fixed = true;
        }
      });
      q = d3.geom.quadtree(this.nodes);
      for (i = _i = 0, _ref = this.nodes.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        q.visit(this.detectCollision(this.nodes[i]));
      }
      return this.connector.style("z-index", -1).style("left", function(d) {
        return d.source.x + "px";
      }).style("top", function(d) {
        return d.source.y + "px";
      }).style("width", function(d) {
        var dx, dy;
        dx = d.target.x - d.source.x;
        dy = d.target.y - d.source.y;
        return Math.sqrt(dx * dx + dy * dy) + "px";
      }).style("-webkit-transform", this.connectorTransform).style("-moz-transform", this.connectorTransform).style("transform", this.connectorTransform);
    };

    Cloud.prototype.addContribution = function(c) {
      var $c, id;
      if (c.jquery) {
        id = c.attr('id');
        $c = c;
      } else if (c.id) {
        id = c.id;
        $c = this.wall.$el.find('#' + id);
      } else {
        console.error("Contribution given to @addContribution must have an id!");
        throw "Invalid Contribution";
      }
      c = $c[0];
      c.index = this.nodes.length;
      this.nodes.push(c);
      return this.update();
    };

    Cloud.prototype.addTag = function(t) {
      var $t, id;
      if (t.jquery) {
        id = t.attr('id');
        $t = t;
      } else if (t.id) {
        id = t.id;
        $t = this.wall.$el.find('#' + id);
      } else {
        console.error("Tag given to @addTag must have an id!");
        throw "Invalid Tag";
      }
      t = $t[0];
      t.index = this.nodes.length;
      this.tags[t.id] = t;
      this.nodes.push(t);
      return this.update();
    };

    Cloud.prototype.addLinks = function(c, ts) {
      var $c, $t, id, t, _i, _len;
      if (c.jquery) {
        id = c.attr('id');
        $c = c;
      } else if (c.id) {
        id = c.id;
        $c = this.wall.$el.find('#' + id);
      } else {
        console.error("Contribution given to @addContribution must have an id!");
        throw "Invalid Contributiona";
      }
      c = $c[0];
      for (_i = 0, _len = ts.length; _i < _len; _i++) {
        t = ts[_i];
        if (t.jquery) {
          id = t.attr('id');
          $t = t;
        } else if (t.id) {
          id = t.id;
          $t = this.wall.$el.find('#' + id);
        } else {
          console.error("Tag given to @addTag must have an id!");
          throw "Invalid Tag";
        }
        t = $t[0];
        (t.contribs != null) || (t.contribs = []);
        t.contribs.push(c.id);
        this.links.push({
          source: t,
          target: c
        });
      }
      return this.update();
    };

    Cloud.prototype.detectCollision = function(b) {
      var $b, bHeight, bIsTag, bWidth, nx1, nx2, ny1, ny2,
        _this = this;
      $b = jQuery(b);
      bWidth = $b.outerWidth();
      bHeight = $b.outerHeight();
      nx1 = b.x - bWidth / 2;
      nx2 = b.x + bWidth / 2;
      ny1 = b.y - bHeight / 2;
      ny2 = b.y + bHeight / 2;
      bIsTag = $b.hasClass('tag');
      return function(quad, x1, y1, x2, y2) {
        var $q, h, qHeight, qIsTag, qWidth, w, xDist, xNudge, xOverlap, yDist, yNudge, yOverlap;
        if (quad.point && quad.point !== b) {
          qWidth = jQuery(quad.point).outerWidth();
          qHeight = jQuery(quad.point).outerHeight();
          w = bWidth / 2 + qWidth / 2;
          h = bHeight / 2 + qHeight / 2;
          xDist = Math.abs(b.x - quad.point.x);
          yDist = Math.abs(b.y - quad.point.y);
          if (xDist < w && yDist < h) {
            $q = jQuery(quad.point);
            qIsTag = $q.hasClass('tag');
            yOverlap = h - yDist;
            xOverlap = w - xDist;
            if (xDist / w < yDist / h) {
              yNudge = yOverlap / 2;
              if (b.y < quad.point.y) {
                b.y -= yNudge;
                quad.point.y += yNudge;
              } else {
                b.y += yNudge;
                quad.point.y -= yNudge;
              }
            } else {
              xNudge = xOverlap / 2;
              if (b.x < quad.point.x) {
                b.x -= xNudge;
                quad.point.x += xNudge;
              } else {
                b.x += xNudge;
                quad.point.x -= xNudge;
              }
            }
          }
        }
        return x1 > nx2 || x2 < nx1 || y1 > ny2 || y2 < ny1;
      };
    };

    Cloud.prototype.update = function(ev) {
      var $n, i, n, pos, _i, _len, _ref;
      _ref = this.nodes;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        n = _ref[i];
        $n = jQuery(n);
        pos = $n.position();
        if (n.x == null) {
          n.x = pos.left + $n.outerWidth() / 2;
        }
        if (n.y == null) {
          n.y = pos.top + $n.outerHeight() / 2;
        }
      }
      this.balloon = this.vis.selectAll('.balloon').data(this.nodes).call(this.force.drag);
      this.connector = this.vis.selectAll(".connector").data(this.links);
      this.connector.enter().append("div").attr("class", "connector");
      return this.force.start();
    };

    return Cloud;

  })();

}).call(this);
