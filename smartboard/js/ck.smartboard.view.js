// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  CK.Smartboard.View = (function() {

    function View() {}

    View.findOrCreate = function(parent, selector, html) {
      var el;
      el = parent.find(selector);
      if (el.length > 0) {
        return el;
      }
      el = jQuery(html);
      parent.append(el);
      return el;
    };

    return View;

  })();

  CK.Smartboard.View.Base = (function(_super) {

    __extends(Base, _super);

    function Base() {
      this.domID = __bind(this.domID, this);

      this.findOrCreate = __bind(this.findOrCreate, this);
      return Base.__super__.constructor.apply(this, arguments);
    }

    Base.prototype.findOrCreate = function(selector, html) {
      return CK.Smartboard.View.findOrCreate(this.$el, selector, html);
    };

    Base.prototype.corporealize = function() {
      var _this = this;
      this.$el.hide();
      if (!(this.$el.parent().length > 0)) {
        if (this.model.justAdded) {
          this.$el.addClass('new');
          delete this.model.justAdded;
        }
        this.$el.draggable({
          stop: function(ev, ui) {
            _this.model.save({
              pos: ui.position
            });
            return true;
          }
        });
        this.$el.css('position', 'absolute');
        jQuery('#wall').append(this.$el);
      }
      if (this.model.has('pos')) {
        this.$el.css({
          left: this.model.get('pos').left + 'px',
          top: this.model.get('pos').top + 'px'
        });
      } else {
        this.autoPosition();
      }
      return this.$el.show();
    };

    Base.prototype.autoPosition = function() {
      var left, top, wallHeight, wallWidth;
      wallWidth = jQuery('#wall').width();
      wallHeight = jQuery('#wall').height();
      left = Math.random() * (wallWidth - this.$el.width());
      top = Math.random() * (wallHeight - this.$el.height());
      this.$el.css({
        left: left + 'px',
        top: top + 'px'
      });
      return this.model.save({
        pos: {
          left: left,
          top: top
        }
      });
    };

    Base.prototype.domID = function() {
      return this.model.id;
    };

    return Base;

  })(Backbone.View);

  CK.Smartboard.View.Wall = (function(_super) {

    __extends(Wall, _super);

    function Wall() {
      return Wall.__super__.constructor.apply(this, arguments);
    }

    Wall.prototype.tagName = 'div';

    Wall.prototype.id = 'wall';

    Wall.prototype.events = {
      'click #add-tag-opener': function(ev) {
        var addTagContainer,
          _this = this;
        addTagContainer = this.$el.find('#add-tag-container');
        addTagContainer.toggleClass('opened');
        if (addTagContainer.hasClass('opened')) {
          return setTimeout(function() {
            return _this.$el.find('#new-tag').focus();
          }, 1000);
        }
      },
      'click #submit-new-tag': function(ev) {
        return this.submitNewTag();
      },
      'keydown #new-tag': function(ev) {
        if (ev.keyCode === 13) {
          return this.submitNewTag();
        }
      }
    };

    Wall.prototype.submitNewTag = function() {
      var newTag;
      newTag = this.$el.find('#new-tag').val();
      Sail.app.createNewTag(newTag);
      this.$el.find('#add-tag-container').removeClass('opened').blur();
      return this.$el.find('#new-tag').val('');
    };

    Wall.prototype.cloudify = function() {
      var contributionBalloon, fill, force, height, i, length, links, nodes, radius, tags, tick, transform, vis, width;
      this.$el.find('.balloon.tag.ui-draggable, .balloon.contribution.ui-draggable').draggable('disable');
      tick = function() {
        return contributionBalloon.style('left', function(d) {
          if (d.classList.contains('ui-draggable-dragging')) {
            return d;
          } else {
            return (d.x = Math.max(radius, Math.min(width - radius, d.x))) + "px";
          }
        }).style('top', function(d) {
          if (d.classList.contains('ui-draggable-dragging')) {
            return d;
          } else {
            return (d.y = Math.max(radius, Math.min(height - radius, d.y))) + "px";
          }
        });
      };
      transform = function(d) {
        return "rotate(" + Math.atan2(d.target.y - d.source.y, d.target.x - d.source.x) * 180 / Math.PI + "deg)";
      };
      length = function(d) {
        var dx, dy;
        dx = d.target.x - d.source.x;
        dy = d.target.y - d.source.y;
        return Math.sqrt(dx * dx + dy * dy) + "px";
      };
      width = this.$el.innerWidth();
      height = this.$el.innerHeight();
      radius = 50;
      fill = d3.scale.category20();
      force = d3.layout.force().charge(-500).linkDistance(30).size([width, height]);
      vis = d3.select("#" + this.id);
      i = 0;
      tags = {};
      Sail.app.tags.each(function(tag) {
        var t;
        t = jQuery('#' + tag.id)[0];
        t.index = i;
        tags[tag.id] = t;
        return i++;
      });
      nodes = this.$el.find('.balloon').toArray();
      links = [];
      jQuery('.balloon.contribution').each(function() {
        var c, contribBalloon, t, _i, _len, _ref, _results;
        contribBalloon = jQuery(this);
        if (!contribBalloon.data('tags')) {
          return;
        }
        c = contribBalloon[0];
        c.index = i;
        i++;
        _ref = contribBalloon.data('tags').split(' ');
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          t = _ref[_i];
          _results.push(links.push({
            source: tags[t],
            target: c
          }));
        }
        return _results;
      });
      this.$el.find('.balloon').each(function() {});
      contributionBalloon = vis.selectAll('.balloon').data(nodes).call(force.drag);
      return force.nodes(nodes).links(links).on('tick', tick).start();
    };

    return Wall;

  })(CK.Smartboard.View.Base);

  CK.Smartboard.View.ContributionBalloon = (function(_super) {

    __extends(ContributionBalloon, _super);

    function ContributionBalloon() {
      this.renderTags = __bind(this.renderTags, this);

      this.render = __bind(this.render, this);

      this.id = __bind(this.id, this);
      return ContributionBalloon.__super__.constructor.apply(this, arguments);
    }

    ContributionBalloon.prototype.tagName = 'article';

    ContributionBalloon.prototype.className = 'contribution balloon';

    ContributionBalloon.prototype.id = function() {
      return this.domID();
    };

    ContributionBalloon.prototype.render = function() {
      var body, headline, meta;
      headline = this.findOrCreate('.headline', "<h3 class='headline'></h3>");
      headline.text(this.model.get('headline'));
      body = this.findOrCreate('.body', "<div class='body'></div>");
      if (this.model.get('content_type') === 'text') {
        body.text(this.model.get('content'));
      } else {
        body.text(this.model.get('content'));
      }
      meta = this.findOrCreate('.meta', "<div class='meta'><span class='author'></span></div>");
      meta.find('.author').text(this.model.get('author')).addClass("author-" + (this.model.get('author')));
      this.renderTags();
      this.corporealize();
      return this;
    };

    ContributionBalloon.prototype.renderTags = function() {
      var tag, tagIds;
      if (this.model.get('tags') == null) {
        return;
      }
      tagIds = (function() {
        var _i, _len, _ref, _results;
        _ref = this.model.get('tags');
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          tag = _ref[_i];
          _results.push(tag.id);
        }
        return _results;
      }).call(this);
      this.$el.attr('data-tags', tagIds.join(" "));
      return this;
    };

    return ContributionBalloon;

  })(CK.Smartboard.View.Base);

  CK.Smartboard.View.TagBalloon = (function(_super) {

    __extends(TagBalloon, _super);

    function TagBalloon() {
      this.render = __bind(this.render, this);

      this.id = __bind(this.id, this);
      return TagBalloon.__super__.constructor.apply(this, arguments);
    }

    TagBalloon.prototype.tagName = 'div';

    TagBalloon.prototype.className = 'tag balloon';

    TagBalloon.prototype.id = function() {
      return this.domID();
    };

    TagBalloon.prototype.render = function() {
      var name;
      name = this.findOrCreate('.name', "<h3 class='name'></h3>");
      name.text(this.model.get('name'));
      this.corporealize();
      this.$el.show();
      return this;
    };

    return TagBalloon;

  })(CK.Smartboard.View.Base);

}).call(this);
