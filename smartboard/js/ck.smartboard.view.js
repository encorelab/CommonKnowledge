// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  CK.Smartboard.View = (function() {

    function View() {}

    View.findOrCreate = function(parent, selector, html) {
      var el;
      el = parent.find(selector);
      if (el.length > 0) {
        return el;
      }
      el = jQuery(html);
      parent.append(el);
      return el;
    };

    return View;

  })();

  CK.Smartboard.View.Base = (function(_super) {

    __extends(Base, _super);

    function Base() {
      this.domID = __bind(this.domID, this);

      this.findOrCreate = __bind(this.findOrCreate, this);
      return Base.__super__.constructor.apply(this, arguments);
    }

    Base.prototype.findOrCreate = function(selector, html) {
      return CK.Smartboard.View.findOrCreate(this.$el, selector, html);
    };

    Base.prototype.corporealize = function() {
      this.$el.hide();
      if (!(this.$el.parent().length > 0)) {
        if (this.model.justAdded) {
          this.$el.addClass('new');
          delete this.model.justAdded;
        }
        this.$el.css('position', 'absolute');
        jQuery('#wall').append(this.$el);
      }
      if (this.model.has('pos')) {
        this.$el.css({
          left: this.model.get('pos').left + 'px',
          top: this.model.get('pos').top + 'px'
        });
      } else {
        this.autoPosition();
      }
      return this.$el.show();
    };

    Base.prototype.autoPosition = function() {
      var left, top, wallHeight, wallWidth;
      wallWidth = jQuery('#wall').width();
      wallHeight = jQuery('#wall').height();
      left = Math.random() * (wallWidth - this.$el.width());
      top = Math.random() * (wallHeight - this.$el.height());
      this.$el.css({
        left: left + 'px',
        top: top + 'px'
      });
      return this.model.save({
        pos: {
          left: left,
          top: top
        }
      });
    };

    Base.prototype.domID = function() {
      return this.model.id;
    };

    return Base;

  })(Backbone.View);

  CK.Smartboard.View.Wall = (function(_super) {

    __extends(Wall, _super);

    function Wall() {
      return Wall.__super__.constructor.apply(this, arguments);
    }

    Wall.prototype.tagName = 'div';

    Wall.prototype.id = 'wall';

    Wall.prototype.events = {
      'click #add-tag-opener': function(ev) {
        var addTagContainer,
          _this = this;
        addTagContainer = this.$el.find('#add-tag-container');
        addTagContainer.toggleClass('opened');
        if (addTagContainer.hasClass('opened')) {
          return setTimeout(function() {
            return _this.$el.find('#new-tag').focus();
          }, 1000);
        }
      },
      'click #submit-new-tag': function(ev) {
        return this.submitNewTag();
      },
      'keydown #new-tag': function(ev) {
        if (ev.keyCode === 13) {
          return this.submitNewTag();
        }
      }
    };

    Wall.prototype.submitNewTag = function() {
      var newTag;
      newTag = this.$el.find('#new-tag').val();
      Sail.app.createNewTag(newTag);
      this.$el.find('#add-tag-container').removeClass('opened').blur();
      return this.$el.find('#new-tag').val('');
    };

    Wall.prototype.cloudify = function() {
      var $n, connector, connectorTransform, contributionBalloon, detectCollision, fill, force, i, linkDistance, links, n, nodes, tags, tick, vis, wallHeight, wallWidth, _i, _len;
      console.log("Cloudifying the wall...");
      this.$el.find('.balloon.tag.ui-draggable, .balloon.contribution.ui-draggable').draggable('disable');
      tick = function() {
        var i, n, q, _i;
        contributionBalloon.style('left', function(d) {
          var balloonWidth;
          balloonWidth = jQuery(d).outerWidth();
          if (d.x + balloonWidth / 2 > wallWidth) {
            d.x = wallWidth - balloonWidth / 2;
          } else if (d.x - balloonWidth / 2 < 0) {
            d.x = 0 + balloonWidth / 2;
          }
          return (d.x - balloonWidth / 2) + 'px';
        }).style('top', function(d) {
          var balloonHeight;
          balloonHeight = jQuery(d).outerHeight();
          if (d.y + balloonHeight / 2 > wallHeight) {
            d.y = wallHeight - balloonHeight / 2;
          } else if (d.y - balloonHeight / 2 < 0) {
            d.y = 0 + balloonHeight / 2;
          }
          return (d.y - balloonHeight / 2) + 'px';
        });
        q = d3.geom.quadtree(nodes);
        i = 0;
        n = nodes.length;
        for (i = _i = 0; 0 <= n ? _i < n : _i > n; i = 0 <= n ? ++_i : --_i) {
          q.visit(detectCollision(nodes[i]));
        }
        return connector.style("z-index", -1).style("left", function(d) {
          return d.source.x + "px";
        }).style("top", function(d) {
          return d.source.y + "px";
        }).style("width", function(d) {
          var dx, dy;
          dx = d.target.x - d.source.x;
          dy = d.target.y - d.source.y;
          return Math.sqrt(dx * dx + dy * dy) + "px";
        }).style("-webkit-transform", connectorTransform).style("-moz-transform", connectorTransform).style("transform", connectorTransform);
      };
      detectCollision = function(b) {
        var $b, bHeight, bIsTag, bWidth, nx1, nx2, ny1, ny2;
        $b = jQuery(b);
        bWidth = b.width;
        bHeight = b.height;
        nx1 = b.x - bWidth / 2;
        nx2 = b.x + bWidth / 2;
        ny1 = b.y - bHeight / 2;
        ny2 = b.y + bHeight / 2;
        bIsTag = $b.hasClass('tag');
        return function(quad, x1, y1, x2, y2) {
          var $q, h, qHeight, qIsTag, qWidth, w, xDist, xNudge, xOverlap, yDist, yNudge, yOverlap;
          if (quad.point && quad.point !== b) {
            qWidth = quad.point.width;
            qHeight = quad.point.height;
            w = bWidth / 2 + qWidth / 2;
            h = bHeight / 2 + qHeight / 2;
            xDist = Math.abs(b.x - quad.point.x);
            yDist = Math.abs(b.y - quad.point.y);
            if (xDist < w && yDist < h) {
              $q = jQuery(quad.point);
              qIsTag = $q.hasClass('tag');
              yOverlap = h - yDist;
              xOverlap = w - xDist;
              if (xDist / w < yDist / h) {
                yNudge = yOverlap / 2;
                if (b.y < quad.point.y) {
                  b.y -= yNudge;
                  quad.point.y += yNudge;
                } else {
                  b.y += yNudge;
                  quad.point.y -= yNudge;
                }
              } else {
                xNudge = xOverlap / 2;
                if (b.x < quad.point.x) {
                  b.x -= xNudge * (qIsTag != null ? qIsTag : {
                    1.1: force.alpha()
                  });
                  quad.point.x += xNudge * (bIsTag != null ? bIsTag : {
                    1.1: force.alpha()
                  });
                } else {
                  b.x += xNudge * (qIsTag != null ? qIsTag : {
                    1.1: force.alpha()
                  });
                  quad.point.x -= xNudge * (bIsTag != null ? bIsTag : {
                    1.1: force.alpha()
                  });
                }
              }
            }
          }
          return x1 > nx2 || x2 < nx1 || y1 > ny2 || y2 < ny1;
        };
      };
      linkDistance = function(link, i) {
        return (jQuery(link.source).outerHeight() / 2 + jQuery(link.target).outerHeight() / 2) + 40;
      };
      wallWidth = this.$el.innerWidth();
      wallHeight = this.$el.innerHeight();
      fill = d3.scale.category20();
      force = d3.layout.force().charge(function(d) {
        if (jQuery(d).hasClass('tag')) {
          return -4500;
        } else {
          return -2000;
        }
      }).linkDistance(linkDistance).linkStrength(0.2).gravity(0).friction(0.2).size([wallWidth, wallHeight]);
      vis = d3.select("#" + this.id);
      i = 0;
      tags = {};
      Sail.app.tags.each(function(tag) {
        var t;
        t = jQuery('#' + tag.id)[0];
        t.index = i;
        tags[tag.id] = t;
        return i++;
      });
      nodes = this.$el.find('.balloon').toArray();
      links = [];
      jQuery('.balloon.contribution').each(function() {
        var c, contribBalloon, t, _i, _len, _ref, _results;
        contribBalloon = jQuery(this);
        if (!contribBalloon.data('tags')) {
          return;
        }
        c = contribBalloon[0];
        c.index = i;
        i++;
        _ref = contribBalloon.data('tags').split(' ');
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          t = _ref[_i];
          if (tags[t]) {
            (tags[t].contribs != null) || (tags[t].contribs = []);
            tags[t].contribs.push(c.id);
            _results.push(links.push({
              source: tags[t],
              target: c
            }));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      });
      contributionBalloon = vis.selectAll('.balloon').data(nodes).call(force.drag);
      force.nodes(nodes).links(links).on('tick', tick).start();
      for (_i = 0, _len = nodes.length; _i < _len; _i++) {
        n = nodes[_i];
        $n = jQuery(n);
        n.width = $n.outerWidth();
        n.height = $n.outerHeight();
      }
      connector = vis.selectAll(".connector").data(links).enter().append("div").attr("class", "connector");
      connectorTransform = function(d) {
        return "rotate(" + (Math.atan2(d.target.y - d.source.y, d.target.x - d.source.x) * 180 / Math.PI) + "deg)";
      };
      return Sail.app.force = force;
    };

    return Wall;

  })(CK.Smartboard.View.Base);

  CK.Smartboard.View.Balloon = (function(_super) {

    __extends(Balloon, _super);

    function Balloon() {
      this.moveToTop = __bind(this.moveToTop, this);
      return Balloon.__super__.constructor.apply(this, arguments);
    }

    Balloon.prototype.moveToTop = function() {
      var maxZ;
      maxZ = _.max(jQuery('.balloon').map(function() {
        return parseInt(jQuery(this).zIndex()) + 1;
      }));
      return this.$el.zIndex(maxZ);
    };

    return Balloon;

  })(CK.Smartboard.View.Base);

  CK.Smartboard.View.ContributionBalloon = (function(_super) {

    __extends(ContributionBalloon, _super);

    function ContributionBalloon() {
      this.renderTags = __bind(this.renderTags, this);

      this.render = __bind(this.render, this);

      this.id = __bind(this.id, this);
      return ContributionBalloon.__super__.constructor.apply(this, arguments);
    }

    ContributionBalloon.prototype.tagName = 'article';

    ContributionBalloon.prototype.className = 'contribution balloon';

    ContributionBalloon.prototype.id = function() {
      return this.domID();
    };

    ContributionBalloon.prototype.events = {
      'mousedown': function(ev) {
        return this.moveToTop();
      },
      'click': function(ev) {
        return this.$el.toggleClass('opened');
      }
    };

    ContributionBalloon.prototype.render = function() {
      var body, headline, meta;
      headline = this.findOrCreate('.headline', "<h3 class='headline'></h3>");
      headline.text(this.model.get('headline'));
      body = this.findOrCreate('.body', "<div class='body'></div>");
      if (this.model.get('content_type') === 'text') {
        body.text(this.model.get('content'));
      } else {
        body.text(this.model.get('content'));
      }
      meta = this.findOrCreate('.meta', "<div class='meta'><span class='author'></span></div>");
      meta.find('.author').text(this.model.get('author')).addClass("author-" + (this.model.get('author')));
      this.renderTags();
      this.corporealize();
      return this;
    };

    ContributionBalloon.prototype.renderTags = function() {
      var tag, tagIds;
      if (this.model.get('tags') == null) {
        return;
      }
      tagIds = (function() {
        var _i, _len, _ref, _results;
        _ref = this.model.get('tags');
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          tag = _ref[_i];
          _results.push(tag.id);
        }
        return _results;
      }).call(this);
      this.$el.attr('data-tags', tagIds.join(" "));
      return this;
    };

    return ContributionBalloon;

  })(CK.Smartboard.View.Balloon);

  CK.Smartboard.View.TagBalloon = (function(_super) {

    __extends(TagBalloon, _super);

    function TagBalloon() {
      this.render = __bind(this.render, this);

      this.id = __bind(this.id, this);
      return TagBalloon.__super__.constructor.apply(this, arguments);
    }

    TagBalloon.prototype.tagName = 'div';

    TagBalloon.prototype.className = 'tag balloon';

    TagBalloon.prototype.id = function() {
      return this.domID();
    };

    TagBalloon.prototype.events = {
      'mousedown': function(ev) {
        return this.moveToTop();
      }
    };

    TagBalloon.prototype.render = function() {
      var name;
      name = this.findOrCreate('.name', "<h3 class='name'></h3>");
      name.text(this.model.get('name'));
      this.corporealize();
      this.$el.show();
      return this;
    };

    return TagBalloon;

  })(CK.Smartboard.View.Balloon);

}).call(this);
