// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  CK.Smartboard.View = (function() {

    function View() {}

    View.findOrCreate = function(parent, selector, html) {
      var el;
      el = parent.find(selector);
      if (el.length > 0) {
        return el;
      }
      el = jQuery(html);
      parent.append(el);
      return el;
    };

    return View;

  })();

  CK.Smartboard.View.Base = (function(_super) {

    __extends(Base, _super);

    function Base() {
      this.findOrCreate = __bind(this.findOrCreate, this);
      return Base.__super__.constructor.apply(this, arguments);
    }

    Base.prototype.findOrCreate = function(selector, html) {
      return CK.Smartboard.View.findOrCreate(this.$el, selector, html);
    };

    Base.prototype.corporealize = function() {
      var _this = this;
      this.$el.hide();
      if (!(this.$el.parent().length > 0)) {
        if (this.model.justAdded) {
          this.$el.addClass('new');
          delete this.model.justAdded;
        }
        this.$el.draggable({
          stop: function(ev, ui) {
            _this.model.save({
              pos: ui.position
            });
            return true;
          }
        });
        this.$el.css('position', 'absolute');
        jQuery('#wall').append(this.$el);
      }
      if (this.model.has('pos')) {
        this.$el.css({
          left: this.model.get('pos').left + 'px',
          top: this.model.get('pos').top + 'px'
        });
      } else {
        this.autoPosition();
      }
      return this.$el.show();
    };

    Base.prototype.autoPosition = function() {
      var left, top, wallHeight, wallWidth;
      wallWidth = jQuery('#wall').width();
      wallHeight = jQuery('#wall').height();
      left = Math.random() * (wallWidth - this.$el.width());
      top = Math.random() * (wallHeight - this.$el.height());
      this.$el.css({
        left: left + 'px',
        top: top + 'px'
      });
      return this.model.save({
        pos: {
          left: left,
          top: top
        }
      });
    };

    return Base;

  })(Backbone.View);

  CK.Smartboard.View.Wall = (function(_super) {

    __extends(Wall, _super);

    function Wall() {
      return Wall.__super__.constructor.apply(this, arguments);
    }

    Wall.prototype.tagName = 'div';

    Wall.prototype.id = 'wall';

    Wall.prototype.submitNewTag = function() {
      var newTag;
      newTag = this.$el.find('#new-tag').val();
      Sail.app.createNewTag(newTag);
      this.$el.find('#add-tag-container').removeClass('opened').blur();
      return this.$el.find('#new-tag').val('');
    };

    Wall.prototype.events = {
      'click #add-tag-opener': function(ev) {
        var addTagContainer,
          _this = this;
        addTagContainer = this.$el.find('#add-tag-container');
        addTagContainer.toggleClass('opened');
        if (addTagContainer.hasClass('opened')) {
          return setTimeout(function() {
            return _this.$el.find('#new-tag').focus();
          }, 1000);
        }
      },
      'click #submit-new-tag': function(ev) {
        return this.submitNewTag();
      },
      'keydown #new-tag': function(ev) {
        if (ev.keyCode === 13) {
          return this.submitNewTag();
        }
      }
    };

    return Wall;

  })(CK.Smartboard.View.Base);

  CK.Smartboard.View.ContributionBubble = (function(_super) {

    __extends(ContributionBubble, _super);

    function ContributionBubble() {
      this.domID = __bind(this.domID, this);

      this.render = __bind(this.render, this);

      this.id = __bind(this.id, this);
      return ContributionBubble.__super__.constructor.apply(this, arguments);
    }

    ContributionBubble.prototype.tagName = 'article';

    ContributionBubble.prototype.className = 'contribution balloon';

    ContributionBubble.prototype.id = function() {
      return this.domID();
    };

    ContributionBubble.prototype.render = function() {
      var body, headline, meta;
      headline = this.findOrCreate('.headline', "<h3 class='headline'></h3>");
      headline.text(this.model.get('headline'));
      body = this.findOrCreate('.body', "<div class='body'></div>");
      if (this.model.get('content_type') === 'text') {
        body.text(this.model.get('content'));
      } else {
        body.text(this.model.get('content'));
      }
      meta = this.findOrCreate('.meta', "<div class='meta'><span class='author'></span></div>");
      meta.find('.author').text(this.model.get('author')).addClass("author-" + (this.model.get('author')));
      this.corporealize();
      return this;
    };

    ContributionBubble.prototype.domID = function() {
      return "contribution-" + this.model.id;
    };

    return ContributionBubble;

  })(CK.Smartboard.View.Base);

  CK.Smartboard.View.TagBubble = (function(_super) {

    __extends(TagBubble, _super);

    function TagBubble() {
      this.domID = __bind(this.domID, this);

      this.render = __bind(this.render, this);

      this.id = __bind(this.id, this);
      return TagBubble.__super__.constructor.apply(this, arguments);
    }

    TagBubble.prototype.tagName = 'div';

    TagBubble.prototype.className = 'tag balloon';

    TagBubble.prototype.id = function() {
      return this.domID();
    };

    TagBubble.prototype.render = function() {
      var name;
      name = this.findOrCreate('.name', "<h3 class='name'></h3>");
      name.text(this.model.get('name'));
      this.corporealize();
      this.$el.show();
      return this;
    };

    TagBubble.prototype.domID = function() {
      return "tag-" + this.model.id;
    };

    return TagBubble;

  })(CK.Smartboard.View.Base);

}).call(this);
