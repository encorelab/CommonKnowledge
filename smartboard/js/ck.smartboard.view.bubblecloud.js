// Generated by CoffeeScript 1.4.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  CK.Smartboard.View.BubbleCloud = (function() {

    function BubbleCloud(wallView) {
      this.render = __bind(this.render, this);

      this.renderNode = __bind(this.renderNode, this);

      this.addNode = __bind(this.addNode, this);

      this.startForce = __bind(this.startForce, this);

      this.detectCollision = __bind(this.detectCollision, this);

      this.tick = __bind(this.tick, this);

      this.connectorTransform = __bind(this.connectorTransform, this);

      this.linkDistance = __bind(this.linkDistance, this);

      this.generateForceFunction = __bind(this.generateForceFunction, this);
      console.log("Cloudifying the wall...");
      this.wall = wallView;
      this.wallWidth = this.wall.$el.innerWidth();
      this.wallHeight = this.wall.$el.innerHeight();
      this.nodes = [];
      this.links = [];
      this.force = this.generateForceFunction();
      this.vis = d3.select("#" + this.wall.id);
    }

    BubbleCloud.prototype.generateForceFunction = function() {
      return d3.layout.force().charge(0).linkDistance(this.linkDistance).linkStrength(0.2).gravity(0).friction(0.2).size([this.wallWidth, this.wallHeight]).nodes(this.nodes).links(this.links).on('tick', this.tick);
    };

    BubbleCloud.prototype.linkDistance = function(link, i) {
      return (jQuery(link.source).outerWidth() / 2 + jQuery(link.target).outerWidth() / 2) + 10;
    };

    BubbleCloud.prototype.connectorTransform = function(d) {
      return "rotate(" + (Math.atan2(d.target.y - d.source.y, d.target.x - d.source.x) * 180 / Math.PI) + "deg)";
    };

    BubbleCloud.prototype.tick = function() {
      var i, q, _i, _ref,
        _this = this;
      this.balloon.style('left', function(d) {
        var balloonWidth;
        balloonWidth = jQuery(d).outerWidth();
        if (d.x + balloonWidth / 2 > _this.wallWidth) {
          d.x = _this.wallWidth - balloonWidth / 2;
        } else if (d.x - balloonWidth / 2 < 0) {
          d.x = 0 + balloonWidth / 2;
        }
        return (d.x - balloonWidth / 2) + 'px';
      }).style('top', function(d) {
        var balloonHeight;
        balloonHeight = jQuery(d).outerHeight();
        if (d.y + balloonHeight / 2 > _this.wallHeight) {
          d.y = _this.wallHeight - balloonHeight / 2;
        } else if (d.y - balloonHeight / 2 < 0) {
          d.y = 0 + balloonHeight / 2;
        }
        return (d.y - balloonHeight / 2) + 'px';
      }).each(function(d) {
        if (jQuery(d).hasClass('pinned')) {
          return d.fixed = true;
        }
      });
      q = d3.geom.quadtree(this.nodes);
      for (i = _i = 0, _ref = this.nodes.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        q.visit(this.detectCollision(this.nodes[i]));
      }
      return this.connector.style("z-index", -1).style("left", function(d) {
        return d.source.x + "px";
      }).style("top", function(d) {
        return d.source.y + "px";
      }).style("width", function(d) {
        var dx, dy;
        dx = d.target.x - d.source.x;
        dy = d.target.y - d.source.y;
        return Math.sqrt(dx * dx + dy * dy) + "px";
      }).style("-webkit-transform", this.connectorTransform).style("-moz-transform", this.connectorTransform).style("transform", this.connectorTransform);
    };

    /*
        corporealizeContribution: (contrib) =>
            unless contrib.id
                console.error("Contribution given to @corporealizeContribution must have an id!")
                throw "Invalid Contribution"
    
            $c = @wall.find('#'+c.id)
            if $c.length is 0
                bubble = new CK.Smartboard.View.ContributionBalloon {model: contrib}
                contrib.on 'change', bubble.render
                $c.view = bubble
            else
                bubble = $c.view
            
            bubble.render()
    
            contrib.index = @nodes.length
            @nodes.push($c)
            @update()
    */


    /*
        corporealizeTag: (tag) =>
            unless tag.id
                console.error("Tag given to @corporealizeTag must have an id!")
                throw "Invalid Tag"
    
    
    
            t = $t[0]
    
            t.index = @nodes.length
            @tags[t.id] = t
            @nodes.push(t)
            @update()
    */


    /*
        # adds links (connectors) to the cloud if they don't already exist
        corporealizeLinks: (c, ts) =>
            if c.jquery
                id = c.attr('id')
                $c = c
            else if c.id
                id = c.id
                $c = @wall.$el.find('#'+id)
            else
                console.error("Contribution given to @addLinks must have an id!")
                throw "Invalid Contribution"
    
            c = $c[0]
    
            unless c
                console.warn "Contibution Balloon for contribution #{id} has not been rendered yet. This shouldn't have happened!"
                return
    
            for t in ts
                if t.jquery
                    id = t.attr('id')
                    $t = t
                else if t.id
                    id = t.id
                    $t = @wall.$el.find('#'+id)
                else
                    console.error("Tag given to @corporealizeTag must have an id!")
                    throw "Invalid Tag"
    
                t = $t[0]
                
                unless t
                    console.warn "Tag Balloon for tag #{id} has not been rendered yet. This shouldn't have happened!"
                    continue
    
                t.contribs? || t.contribs = []
                t.contribs.push(c.id)
                @links.push
                    source: t
                    target: c
    
            @update()
    */


    BubbleCloud.prototype.detectCollision = function(b) {
      var $b, bHeight, bIsTag, bWidth, nx1, nx2, ny1, ny2,
        _this = this;
      $b = jQuery(b);
      bWidth = $b.outerWidth();
      bHeight = $b.outerHeight();
      nx1 = b.x - bWidth / 2;
      nx2 = b.x + bWidth / 2;
      ny1 = b.y - bHeight / 2;
      ny2 = b.y + bHeight / 2;
      bIsTag = $b.hasClass('tag');
      return function(quad, x1, y1, x2, y2) {
        var $q, h, qHeight, qIsTag, qWidth, w, xDist, xNudge, xOverlap, yDist, yNudge, yOverlap;
        if (quad.point && quad.point !== b) {
          qWidth = jQuery(quad.point).outerWidth();
          qHeight = jQuery(quad.point).outerHeight();
          w = bWidth / 2 + qWidth / 2;
          h = bHeight / 2 + qHeight / 2;
          xDist = Math.abs(b.x - quad.point.x);
          yDist = Math.abs(b.y - quad.point.y);
          if (xDist < w && yDist < h) {
            $q = jQuery(quad.point);
            qIsTag = $q.hasClass('tag');
            yOverlap = h - yDist;
            xOverlap = w - xDist;
            if (xDist / w < yDist / h) {
              yNudge = yOverlap / 2;
              if (b.y < quad.point.y) {
                b.y -= yNudge;
                quad.point.y += yNudge;
              } else {
                b.y += yNudge;
                quad.point.y -= yNudge;
              }
            } else {
              xNudge = xOverlap / 2;
              if (b.x < quad.point.x) {
                b.x -= xNudge;
                quad.point.x += xNudge;
              } else {
                b.x += xNudge;
                quad.point.x -= xNudge;
              }
            }
          }
        }
        return x1 > nx2 || x2 < nx1 || y1 > ny2 || y2 < ny1;
      };
    };

    BubbleCloud.prototype.startForce = function() {
      this.force.start();
      return this.started = true;
    };

    BubbleCloud.prototype.addNode = function(n) {
      if (__indexOf.call(this.nodes, n) < 0) {
        return this.nodes.push(n);
      }
    };

    BubbleCloud.prototype.renderNode = function(n) {
      debugger;      return console.log("Rendering node ", n);
    };

    BubbleCloud.prototype.render = function(ev) {
      var $n, i, n, pos, _i, _len, _ref;
      _ref = this.nodes;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        n = _ref[i];
        $n = jQuery(n);
        pos = $n.position();
        if (n.x == null) {
          n.x = pos.left + $n.outerWidth() / 2;
        }
        if (n.y == null) {
          n.y = pos.top + $n.outerHeight() / 2;
        }
      }
      this.balloon = this.vis.selectAll('.balloon').data(this.nodes).each(this.renderNode).call(this.force.drag);
      this.connector = this.vis.selectAll(".connector").data(this.links);
      this.connector.enter().append("div").attr("class", "connector");
      return this.force.start();
    };

    return BubbleCloud;

  })();

}).call(this);
