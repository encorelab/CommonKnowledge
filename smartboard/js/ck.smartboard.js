// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  CK.Smartboard = (function(_super) {

    __extends(Smartboard, _super);

    function Smartboard() {
      this.createNewTag = __bind(this.createNewTag, this);

      this.authenticate = __bind(this.authenticate, this);

      this.init = __bind(this.init, this);
      return Smartboard.__super__.constructor.apply(this, arguments);
    }

    Smartboard.prototype.curnit = 'CommonKnowledge';

    Smartboard.prototype.name = 'CK.Smartboard';

    Smartboard.prototype.requiredConfig = {
      xmpp: {
        domain: 'string',
        port: 'number'
      },
      rollcall: {
        url: 'string'
      },
      assets: {
        url: 'string'
      },
      mongo: {
        url: 'string'
      }
    };

    Smartboard.prototype.init = function() {
      var bubbleContrib, tagContrib, userFilter,
        _this = this;
      Sail.verifyConfig(this.config, this.requiredConfig);
      console.log("Configuration is valid.");
      this.run = this.run || JSON.parse(jQuery.cookie('run'));
      if (this.run) {
        this.groupchatRoom = this.run.name + '@conference.' + this.xmppDomain;
      }
      userFilter = function(user) {
        return user.kind === 'Instructor';
      };
      Sail.modules.load('Rollcall.Authenticator', {
        mode: 'picker',
        askForRun: true,
        curnit: this.curnit,
        userFilter: userFilter
      }).load('Strophe.AutoConnector').load('AuthStatusWidget', {
        indicatorContainer: 'body',
        clickNameToLogout: true
      }).thenRun(function() {
        Sail.autobindEvents(_this);
        return _this.trigger('initialized');
      });
      this.rollcall = new Rollcall.Client(this.config.rollcall.url);
      bubbleContrib = function(contrib) {
        var bubble;
        bubble = new CK.Smartboard.View.ContributionBubble({
          model: contrib
        });
        contrib.on('change', bubble.render);
        return bubble.render();
      };
      tagContrib = function(tag) {
        var bubble;
        bubble = new CK.Smartboard.View.TagBubble({
          model: tag
        });
        tag.on('change', bubble.render);
        return bubble.render();
      };
      this.contributions = new CK.Model.Contributions();
      this.contributions.on('add', function(contrib) {
        contrib.justAdded = true;
        return bubbleContrib(contrib);
      });
      this.contributions.on('reset', function(collection) {
        return collection.each(bubbleContrib);
      });
      this.tags = new CK.Model.Tags();
      this.tags.on('add', function(tag) {
        tag.justAdded = true;
        return bubbleTag(tag);
      });
      this.tags.on('reset', function(collection) {
        return collection.each(tagContrib);
      });
      return this.wall = new CK.Smartboard.View.Wall({
        el: jQuery('#wall'),
        collection: this.contributions
      });
    };

    Smartboard.prototype.authenticate = function() {
      if (this.run) {
        return Rollcall.Authenticator.requestLogin();
      } else {
        return Rollcall.Authenticator.requestRun();
      }
    };

    Smartboard.prototype.createNewTag = function(name) {
      var tag,
        _this = this;
      tag = new CK.Model.Tag({
        name: name
      });
      return tag.save({}, {
        success: function() {
          var sev;
          sev = new Sail.Event('new_tag', tag.toJSON());
          return _this.groupchat.sendEvent(sev);
        }
      });
    };

    Smartboard.prototype.events = {
      initialized: function(ev) {
        this.authenticate();
        return console.log("Initialized...");
      },
      authenticated: function(ev) {
        console.log("Authenticated...");
        return CK.Model.configure(this.config.mongo.url, this.run.name);
      },
      'ui.initialized': function(ev) {
        return console.log("UI initialized...");
      },
      connected: function(ev) {
        console.log("Connected...");
        this.contributions.fetch();
        return this.tags.fetch();
      },
      sail: {
        contribution: function(sev) {
          var c;
          c = this.contributions.get(sev.payload._id);
          if (c != null) {
            return c.set(sev.payload);
          } else {
            c = new CK.Model.Contribution(sev.payload);
            return this.contributions.add(c);
          }
        },
        new_tag: function(sev) {
          var t;
          t = this.tags.get(sev.payload._id);
          if (t != null) {
            return t.set(sev.payload);
          } else {
            t = new CK.Model.Tag(sev.payload);
            return this.contributions.add(t);
          }
        }
      }
    };

    return Smartboard;

  })(Sail.App);

}).call(this);
